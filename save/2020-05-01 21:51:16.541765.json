{
    "Model": "MyModel",
    "Model Size Trainable": 21754,
    "Model Size Total": 21754,
    "Model Structure": [
        "(conv_1): Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "(bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "(relu_1): ReLU(inplace=True)",
        "(highway_12): Sequential(",
        "  (0): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))",
        "  (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_13): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_14): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv2_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_2): ReLU(inplace=True)",
        "(highway_23): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_24): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv3_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        ")",
        "(relu_3): ReLU(inplace=True)",
        "(highway_34): Sequential(",
        "  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv4_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        ")",
        "(relu_4): ReLU(inplace=True)",
        "(avgPool): AdaptiveAvgPool2d(output_size=(1, 1))",
        "(fc): Linear(in_features=32, out_features=10, bias=True)"
    ],
    "Batch Size": 128,
    "Total Epoch": 350,
    "Device": "cuda",
    "Loss Function": "CrossEntropyLoss",
    "Optimizer": {
        "Type": "SGD",
        "State": {},
        "param_groups": {
            "lr": 0.01,
            "momentum": 0.9,
            "dampening": 0,
            "weight_decay": 0.0005,
            "nesterov": false,
            "initial_lr": 0.01,
            "params": [
                140086813470008,
                140086813470080,
                140086813470152,
                140086813470512,
                140086813470584,
                140086813511752,
                140086813511896,
                140086813512256,
                140086813512328,
                140086813512472,
                140086813512616,
                140086813512976,
                140086813513048,
                140086813513192,
                140086813513336,
                140086813513840,
                140086813514056,
                140086813514128,
                140086813514488,
                140086813514704,
                140086813514776,
                140086813515208,
                140086813515280,
                140086813515424,
                140086813515568,
                140086813569240,
                140086813569312,
                140086813569456,
                140086813569600,
                140086813570824,
                140086813571040,
                140086813571112,
                140086813571472,
                140086813571688,
                140086813571760,
                140086813569960,
                140086813570032,
                140086813570176,
                140086813570320,
                140086813572192,
                140086813572264,
                140086813572408,
                140086813572552,
                140086813631184,
                140086813631400,
                140086813631472,
                140086813631832,
                140086813632048,
                140086813632120,
                140086813572912,
                140086813572984,
                140086813630536,
                140086813630680,
                140086813632480,
                140086813632552
            ]
        }
    },
    "lr Scheduler": {
        "Type": "MultiStepLR",
        "State": {
            "milestones": {
                "150": 1,
                "250": 1
            },
            "gamma": 0.1,
            "base_lrs": [
                0.01
            ],
            "last_epoch": 0,
            "_step_count": 1,
            "_get_lr_called_within_step": false,
            "_last_lr": [
                0.01
            ]
        }
    },
    "Train Transform": [
        "RandomCrop(size=(32, 32), padding=4)",
        "RandomHorizontalFlip(p=0.5)",
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Test Transform": [
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Dataset": "CIFAR10",
    "TrainingTime": "0:54:29.923962",
    "InferenceTime": "0:00:00.653705",
    "Performance": {
        "Best_Train": 83.938,
        "Final_Train": 83.432,
        "Best_Test": 81.83,
        "Final_Test": 81.62,
        "Best_Loss": 747.1307071447372,
        "Final_Loss": 193.7388297021389
    },
    "Class Performance": {
        "plane": 83.5,
        "car": 91.4,
        "bird": 72.7,
        "cat": 67.5,
        "deer": 77.3,
        "dog": 72.3,
        "frog": 86.5,
        "horse": 83.9,
        "ship": 91.9,
        "truck": 89.2
    },
    "Confusion Matrix": {
        "plane": "[835.0, 11.0, 34.0, 12.0, 11.0, 1.0, 8.0, 10.0, 59.0, 19.0]",
        "car": "[13.0, 914.0, 3.0, 3.0, 2.0, 1.0, 3.0, 1.0, 14.0, 46.0]",
        "bird": "[44.0, 1.0, 727.0, 42.0, 71.0, 33.0, 54.0, 14.0, 7.0, 7.0]",
        "cat": "[20.0, 8.0, 50.0, 675.0, 32.0, 114.0, 48.0, 24.0, 12.0, 17.0]",
        "deer": "[14.0, 2.0, 45.0, 41.0, 773.0, 29.0, 47.0, 39.0, 8.0, 2.0]",
        "dog": "[12.0, 2.0, 37.0, 142.0, 31.0, 723.0, 16.0, 29.0, 2.0, 6.0]",
        "frog": "[6.0, 3.0, 38.0, 47.0, 19.0, 14.0, 865.0, 2.0, 3.0, 3.0]",
        "horse": "[14.0, 2.0, 23.0, 27.0, 38.0, 37.0, 4.0, 839.0, 2.0, 14.0]",
        "ship": "[34.0, 12.0, 6.0, 5.0, 0.0, 1.0, 4.0, 3.0, 919.0, 16.0]",
        "truck": "[27.0, 42.0, 6.0, 10.0, 0.0, 0.0, 0.0, 3.0, 20.0, 892.0]"
    }
}