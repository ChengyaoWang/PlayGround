{
    "Model": "ResNet20v1_FOR_CIFAR",
    "Model Size Trainable": 272570,
    "Model Size Total": 272570,
    "Model Structure": [
        "(conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "(bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "(relu): ReLU(inplace=True)",
        "(conv2_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (2): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(conv3_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (2): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(conv4_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (2): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(avgPool): AdaptiveAvgPool2d(output_size=(1, 1))",
        "(fc): Linear(in_features=64, out_features=10, bias=True)"
    ],
    "Batch Size": 128,
    "Total Epoch": 300,
    "Device": "cuda",
    "Loss Function": "CrossEntropyLoss",
    "Optimizer": {
        "Type": "SGD",
        "State": {},
        "param_groups": {
            "lr": 0.1,
            "momentum": 0.9,
            "dampening": 0,
            "weight_decay": 0.0001,
            "nesterov": false,
            "initial_lr": 0.1,
            "params": [
                139943231805264,
                139943231805408,
                139943231805480,
                139943235827464,
                139943231805120,
                139943231805768,
                139943231806128,
                139943231806344,
                139943231806416,
                139943231806848,
                139943231807064,
                139943231807136,
                139943231905864,
                139943231906080,
                139943231906152,
                139943231906584,
                139943231906800,
                139943231906872,
                139943231907232,
                139943231907448,
                139943231907520,
                139943231908816,
                139943231909032,
                139943231909104,
                139943231909464,
                139943231909680,
                139943231909752,
                139943231907952,
                139943231908024,
                139943231908168,
                139943231908312,
                139943231406440,
                139943231406656,
                139943231406728,
                139943231407088,
                139943231407304,
                139943231407376,
                139943231407808,
                139943231408024,
                139943231408096,
                139943231408456,
                139943231408672,
                139943231408744,
                139943231409968,
                139943231475784,
                139943231475856,
                139943231476216,
                139943231476432,
                139943231476504,
                139943231409104,
                139943231409176,
                139943231409320,
                139943231409464,
                139943231476936,
                139943231477152,
                139943231477224,
                139943231477584,
                139943231477800,
                139943231477872,
                139943231478304,
                139943231478520,
                139943231478592,
                139943231478952,
                139943231479168,
                139943231479240,
                139943231479600,
                139943231479672
            ]
        }
    },
    "lr Scheduler": {
        "Type": "MultiStepLR",
        "State": {
            "milestones": {
                "500": 1
            },
            "gamma": 0.1,
            "base_lrs": [
                0.1
            ],
            "last_epoch": 0,
            "_step_count": 1,
            "_get_lr_called_within_step": false,
            "_last_lr": [
                0.1
            ]
        }
    },
    "Train Transform": [
        "RandomCrop(size=(32, 32), padding=4)",
        "RandomHorizontalFlip(p=0.5)",
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Test Transform": [
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Dataset": "CIFAR10",
    "TrainingTime": "1:28:40.500231",
    "InferenceTime": "0:00:01.059848",
    "Performance": {
        "Best_Train": 94.328,
        "Final_Train": 92.346,
        "Best_Test": 89.59,
        "Final_Test": 87.96,
        "Best_Loss": 691.6526373624802,
        "Final_Loss": 69.79751118272543
    },
    "Class Performance": {
        "plane": 94.4,
        "car": 84.2,
        "bird": 81.9,
        "cat": 80.3,
        "deer": 83.3,
        "dog": 78,
        "frog": 96.1,
        "horse": 93,
        "ship": 91,
        "truck": 97.4
    },
    "Confusion Matrix": {
        "plane": "[944.0, 1.0, 11.0, 6.0, 1.0, 1.0, 1.0, 7.0, 16.0, 12.0]",
        "car": "[20.0, 842.0, 0.0, 2.0, 0.0, 0.0, 1.0, 2.0, 8.0, 125.0]",
        "bird": "[44.0, 0.0, 819.0, 37.0, 20.0, 15.0, 36.0, 18.0, 5.0, 6.0]",
        "cat": "[27.0, 0.0, 26.0, 803.0, 19.0, 43.0, 51.0, 15.0, 5.0, 11.0]",
        "deer": "[18.0, 1.0, 29.0, 31.0, 833.0, 9.0, 22.0, 53.0, 1.0, 3.0]",
        "dog": "[14.0, 0.0, 16.0, 131.0, 14.0, 780.0, 20.0, 21.0, 1.0, 3.0]",
        "frog": "[14.0, 0.0, 9.0, 8.0, 3.0, 1.0, 961.0, 1.0, 1.0, 2.0]",
        "horse": "[13.0, 0.0, 3.0, 20.0, 5.0, 25.0, 3.0, 930.0, 0.0, 1.0]",
        "ship": "[46.0, 2.0, 4.0, 1.0, 1.0, 0.0, 3.0, 2.0, 910.0, 31.0]",
        "truck": "[11.0, 3.0, 2.0, 2.0, 0.0, 0.0, 2.0, 1.0, 5.0, 974.0]"
    }
}