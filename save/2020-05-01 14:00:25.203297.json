{
    "Model": "MyModel",
    "Model Size Trainable": 70586,
    "Model Size Total": 70586,
    "Model Structure": [
        "(conv_1): Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "(bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "(relu_1): ReLU(inplace=True)",
        "(highway_12): Sequential(",
        "  (0): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))",
        "  (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_13): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_14): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv2_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        "  (2): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_2): ReLU(inplace=True)",
        "(highway_23): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_24): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv3_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        "  (2): ResidualBlock(",
        "    (conv_1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_3): ReLU(inplace=True)",
        "(highway_34): Sequential(",
        "  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv4_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        "  (2): ResidualBlock(",
        "    (conv_1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_4): ReLU(inplace=True)",
        "(avgPool): AdaptiveAvgPool2d(output_size=(1, 1))",
        "(fc): Linear(in_features=32, out_features=10, bias=True)"
    ],
    "Batch Size": 128,
    "Total Epoch": 350,
    "Device": "cuda",
    "Loss Function": "CrossEntropyLoss",
    "Optimizer": {
        "Type": "Adams",
        "State": {},
        "param_groups": {
            "lr": 0.01,
            "betas": [
                0.9,
                0.999
            ],
            "eps": 1e-8,
            "weight_decay": 0.0001,
            "amsgrad": false,
            "initial_lr": 0.01,
            "params": [
                139935755759480,
                139935848226032,
                139935755788360,
                139935755788720,
                139935755788792,
                139935755788936,
                139935755789080,
                139935755789440,
                139935755789512,
                139935755789656,
                139935755789800,
                139935755790160,
                139935755790232,
                139935755790376,
                139935755790520,
                139935755791024,
                139935755791240,
                139935755791312,
                139935755791672,
                139935755791888,
                139935755791960,
                139935755853896,
                139935755854112,
                139935755854184,
                139935755854544,
                139935755854760,
                139935755854832,
                139935755855264,
                139935755855480,
                139935755855552,
                139935755855912,
                139935755856128,
                139935755856200,
                139935755856632,
                139935755856704,
                139935755856848,
                139935755856992,
                139935755857352,
                139935755857424,
                139935755857568,
                139935755857712,
                139935755912248,
                139935755912464,
                139935755912536,
                139935755912896,
                139935755913112,
                139935755913184,
                139935755911384,
                139935755911456,
                139935755911600,
                139935755911744,
                139935755913616,
                139935755913832,
                139935755913904,
                139935755914264,
                139935755914480,
                139935755914552,
                139935755914984,
                139935755915200,
                139935755984968,
                139935755985328,
                139935755985544,
                139935755985616,
                139935755986048,
                139935755986120,
                139935755986264,
                139935755986408,
                139935755987632,
                139935755987848,
                139935755987920,
                139935755988280,
                139935755988496,
                139935755988568,
                139935755986768,
                139935755986840,
                139935755986984,
                139935755987128,
                139935755522120,
                139935755522336,
                139935755522408,
                139935755522768,
                139935755522984,
                139935755523056,
                139935755523488,
                139935755523704,
                139935755523776,
                139935755524136,
                139935755524352,
                139935755524424,
                139935755524856,
                139935755524928
            ]
        }
    },
    "lr Scheduler": {
        "Type": "MultiStepLR",
        "State": {
            "milestones": {
                "500": 1
            },
            "gamma": 0.1,
            "base_lrs": [
                0.01
            ],
            "last_epoch": 0,
            "_step_count": 1,
            "_get_lr_called_within_step": false,
            "_last_lr": [
                0.01
            ]
        }
    },
    "Train Transform": [
        "RandomCrop(size=(32, 32), padding=4)",
        "RandomHorizontalFlip(p=0.5)",
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Test Transform": [
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Dataset": "CIFAR10",
    "TrainingTime": "1:24:10.557784",
    "InferenceTime": "0:00:00.867221",
    "Performance": {
        "Best_Train": 83.614,
        "Final_Train": 81.754,
        "Best_Test": 82.25,
        "Final_Test": 80.34,
        "Best_Loss": 599.8240139484406,
        "Final_Loss": 199.8139154613018
    },
    "Class Performance": {
        "plane": 79.9,
        "car": 93.4,
        "bird": 70.6,
        "cat": 53.3,
        "deer": 80.7,
        "dog": 72.5,
        "frog": 86.9,
        "horse": 86.3,
        "ship": 91.2,
        "truck": 88.6
    },
    "Confusion Matrix": {
        "plane": "[799.0, 20.0, 32.0, 8.0, 19.0, 1.0, 6.0, 9.0, 82.0, 24.0]",
        "car": "[13.0, 934.0, 1.0, 0.0, 1.0, 1.0, 7.0, 1.0, 8.0, 34.0]",
        "bird": "[50.0, 6.0, 706.0, 18.0, 65.0, 44.0, 67.0, 19.0, 12.0, 13.0]",
        "cat": "[36.0, 10.0, 35.0, 533.0, 65.0, 128.0, 83.0, 47.0, 24.0, 39.0]",
        "deer": "[8.0, 2.0, 26.0, 15.0, 807.0, 12.0, 36.0, 67.0, 21.0, 6.0]",
        "dog": "[16.0, 2.0, 26.0, 77.0, 43.0, 725.0, 29.0, 53.0, 19.0, 10.0]",
        "frog": "[15.0, 6.0, 27.0, 20.0, 41.0, 10.0, 869.0, 4.0, 6.0, 2.0]",
        "horse": "[21.0, 4.0, 14.0, 10.0, 35.0, 19.0, 6.0, 863.0, 12.0, 16.0]",
        "ship": "[50.0, 17.0, 2.0, 1.0, 2.0, 1.0, 4.0, 0.0, 912.0, 11.0]",
        "truck": "[11.0, 67.0, 2.0, 0.0, 1.0, 2.0, 2.0, 3.0, 26.0, 886.0]"
    }
}