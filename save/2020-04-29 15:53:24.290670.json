{
    "Model": "ResNet14v1_FOR_CIFAR",
    "Model Size Trainable": 175354,
    "Model Size Total": 175354,
    "Model Structure": [
        "(conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "(bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "(relu): ReLU(inplace=True)",
        "(conv2_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(conv3_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(conv4_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(avgPool): AdaptiveAvgPool2d(output_size=(1, 1))",
        "(fc): Linear(in_features=64, out_features=10, bias=True)"
    ],
    "Batch Size": 128,
    "Total Epoch": 350,
    "Device": "cuda",
    "Loss Function": "CrossEntropyLoss",
    "Optimizer": {
        "Type": "SGD",
        "State": {},
        "param_groups": {
            "lr": 0.01,
            "momentum": 0.9,
            "dampening": 0,
            "weight_decay": 0.0005,
            "nesterov": false,
            "initial_lr": 0.01,
            "params": [
                140311564112952,
                140311564112880,
                140311564113096,
                140311564113384,
                140311564113312,
                140311564113528,
                140311564113816,
                140311564113744,
                140311564113960,
                140311564114248,
                140311564114176,
                140311564114392,
                140311564114680,
                140311564114608,
                140311564114824,
                140311564115544,
                140311564115472,
                140311564115688,
                140311564197960,
                140311564198032,
                140311564198104,
                140311564115040,
                140311564115112,
                140311564115184,
                140311564115256,
                140311564198464,
                140311564198680,
                140311564198752,
                140311564199112,
                140311564199328,
                140311564199400,
                140311564200624,
                140311564200840,
                140311564200912,
                140311564201272,
                140311564201488,
                140311564201560,
                140311564199760,
                140311564199832,
                140311564199976,
                140311564200120,
                140311564263496,
                140311564263712,
                140311564263784,
                140311564264144,
                140311564264360,
                140311564264432,
                140311564264792,
                140311564264864
            ]
        }
    },
    "lr Scheduler": {
        "Type": "MultiStepLR",
        "State": {
            "milestones": {
                "150": 1,
                "250": 1
            },
            "gamma": 0.1,
            "base_lrs": [
                0.01
            ],
            "last_epoch": 0,
            "_step_count": 1,
            "_get_lr_called_within_step": false,
            "_last_lr": [
                0.01
            ]
        }
    },
    "Train Transform": [
        "RandomCrop(size=(32, 32), padding=4)",
        "RandomHorizontalFlip(p=0.5)",
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Test Transform": [
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Dataset": "CIFAR10",
    "TrainingTime": "1:16:16.032682",
    "InferenceTime": "0:00:00.860588",
    "Performance": {
        "Best_Train": 99.49,
        "Final_Train": 99.482,
        "Best_Test": 90.74,
        "Final_Test": 90.19,
        "Best_Loss": 656.1903188228607,
        "Final_Loss": 16.09057998098433
    },
    "Class Performance": {
        "plane": 90.8,
        "car": 95.3,
        "bird": 85.7,
        "cat": 80,
        "deer": 90.2,
        "dog": 85.8,
        "frog": 93.7,
        "horse": 92.5,
        "ship": 94.2,
        "truck": 93.7
    },
    "Confusion Matrix": {
        "plane": "[908.0, 6.0, 22.0, 11.0, 6.0, 2.0, 2.0, 7.0, 27.0, 9.0]",
        "car": "[9.0, 953.0, 0.0, 5.0, 2.0, 0.0, 0.0, 0.0, 5.0, 26.0]",
        "bird": "[26.0, 0.0, 857.0, 30.0, 20.0, 14.0, 33.0, 11.0, 6.0, 3.0]",
        "cat": "[5.0, 2.0, 25.0, 800.0, 20.0, 92.0, 31.0, 11.0, 4.0, 10.0]",
        "deer": "[8.0, 1.0, 20.0, 19.0, 902.0, 13.0, 14.0, 20.0, 2.0, 1.0]",
        "dog": "[6.0, 2.0, 15.0, 75.0, 22.0, 858.0, 5.0, 15.0, 0.0, 2.0]",
        "frog": "[4.0, 1.0, 16.0, 23.0, 6.0, 11.0, 937.0, 1.0, 0.0, 1.0]",
        "horse": "[7.0, 0.0, 6.0, 13.0, 23.0, 19.0, 1.0, 925.0, 2.0, 4.0]",
        "ship": "[31.0, 5.0, 1.0, 5.0, 1.0, 2.0, 3.0, 2.0, 942.0, 8.0]",
        "truck": "[11.0, 33.0, 2.0, 1.0, 0.0, 4.0, 0.0, 0.0, 12.0, 937.0]"
    }
}