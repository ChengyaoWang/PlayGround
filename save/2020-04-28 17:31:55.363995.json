{
    "Model": "MobileNetv1",
    "Model Size Trainable": 3228170,
    "Model Size Total": 3228170,
    "Model Structure": [
        "(conv1): Sequential(",
        "  (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "  (2): ReLU(inplace=True)",
        ")",
        "(block1): Mobilev1Block(",
        "  (dwConv1): Sequential(",
        "    (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)",
        "    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (2): ReLU(inplace=True)",
        "  )",
        "  (stdConv2): Sequential(",
        "    (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))",
        "    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (2): ReLU(inplace=True)",
        "  )",
        ")",
        "(block2): Mobilev1Block(",
        "  (dwConv1): Sequential(",
        "    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64)",
        "    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (2): ReLU(inplace=True)",
        "  )",
        "  (stdConv2): Sequential(",
        "    (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))",
        "    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (2): ReLU(inplace=True)",
        "  )",
        ")",
        "(block3): Mobilev1Block(",
        "  (dwConv1): Sequential(",
        "    (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)",
        "    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (2): ReLU(inplace=True)",
        "  )",
        "  (stdConv2): Sequential(",
        "    (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))",
        "    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (2): ReLU(inplace=True)",
        "  )",
        ")",
        "(block4): Mobilev1Block(",
        "  (dwConv1): Sequential(",
        "    (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128)",
        "    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (2): ReLU(inplace=True)",
        "  )",
        "  (stdConv2): Sequential(",
        "    (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))",
        "    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (2): ReLU(inplace=True)",
        "  )",
        ")",
        "(block5): Mobilev1Block(",
        "  (dwConv1): Sequential(",
        "    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)",
        "    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (2): ReLU(inplace=True)",
        "  )",
        "  (stdConv2): Sequential(",
        "    (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))",
        "    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (2): ReLU(inplace=True)",
        "  )",
        ")",
        "(block6): Mobilev1Block(",
        "  (dwConv1): Sequential(",
        "    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)",
        "    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (2): ReLU(inplace=True)",
        "  )",
        "  (stdConv2): Sequential(",
        "    (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))",
        "    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (2): ReLU(inplace=True)",
        "  )",
        ")",
        "(iden): Sequential(",
        "  (0): Mobilev1Block(",
        "    (dwConv1): Sequential(",
        "      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)",
        "      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "      (2): ReLU(inplace=True)",
        "    )",
        "    (stdConv2): Sequential(",
        "      (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))",
        "      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "      (2): ReLU(inplace=True)",
        "    )",
        "  )",
        "  (1): Mobilev1Block(",
        "    (dwConv1): Sequential(",
        "      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)",
        "      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "      (2): ReLU(inplace=True)",
        "    )",
        "    (stdConv2): Sequential(",
        "      (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))",
        "      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "      (2): ReLU(inplace=True)",
        "    )",
        "  )",
        "  (2): Mobilev1Block(",
        "    (dwConv1): Sequential(",
        "      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)",
        "      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "      (2): ReLU(inplace=True)",
        "    )",
        "    (stdConv2): Sequential(",
        "      (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))",
        "      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "      (2): ReLU(inplace=True)",
        "    )",
        "  )",
        "  (3): Mobilev1Block(",
        "    (dwConv1): Sequential(",
        "      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)",
        "      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "      (2): ReLU(inplace=True)",
        "    )",
        "    (stdConv2): Sequential(",
        "      (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))",
        "      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "      (2): ReLU(inplace=True)",
        "    )",
        "  )",
        "  (4): Mobilev1Block(",
        "    (dwConv1): Sequential(",
        "      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)",
        "      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "      (2): ReLU(inplace=True)",
        "    )",
        "    (stdConv2): Sequential(",
        "      (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))",
        "      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "      (2): ReLU(inplace=True)",
        "    )",
        "  )",
        ")",
        "(block7): Mobilev1Block(",
        "  (dwConv1): Sequential(",
        "    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=512)",
        "    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (2): ReLU(inplace=True)",
        "  )",
        "  (stdConv2): Sequential(",
        "    (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))",
        "    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (2): ReLU(inplace=True)",
        "  )",
        ")",
        "(block8): Mobilev1Block(",
        "  (dwConv1): Sequential(",
        "    (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)",
        "    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (2): ReLU(inplace=True)",
        "  )",
        "  (stdConv2): Sequential(",
        "    (0): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))",
        "    (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (2): ReLU(inplace=True)",
        "  )",
        ")",
        "(avgPool): AdaptiveAvgPool2d(output_size=(1, 1))",
        "(fc): Linear(in_features=1024, out_features=10, bias=True)"
    ],
    "Batch Size": 128,
    "Total Epoch": 350,
    "Device": "cuda",
    "Loss Function": "CrossEntropyLoss",
    "Optimizer": {
        "Type": "SGD",
        "State": {},
        "param_groups": {
            "lr": 0.01,
            "momentum": 0.9,
            "dampening": 0,
            "weight_decay": 0.0005,
            "nesterov": false,
            "initial_lr": 0.01,
            "params": [
                140457674354480,
                140457674354552,
                140457674354624,
                140457674371144,
                140457674371432,
                140457674371504,
                140457674371576,
                140457674371648,
                140457674371936,
                140457674372008,
                140457674372080,
                140457674372152,
                140457674372440,
                140457674372512,
                140457674372584,
                140457674372656,
                140457674372944,
                140457674373016,
                140457674373088,
                140457674373160,
                140457674373448,
                140457674373520,
                140457674373376,
                140457674373736,
                140457674374168,
                140457674374240,
                140457674374384,
                140457674374528,
                140457674375032,
                140457674375104,
                140457674465424,
                140457674465568,
                140457674466000,
                140457674466072,
                140457674466216,
                140457674466360,
                140457674466864,
                140457674466936,
                140457674467080,
                140457674467224,
                140457674467656,
                140457674467728,
                140457674467872,
                140457674468016,
                140457674468520,
                140457674468592,
                140457674468736,
                140457674468880,
                140457674469312,
                140457674526792,
                140457674526936,
                140457674527080,
                140457674527584,
                140457674527656,
                140457674527800,
                140457674527944,
                140457674528376,
                140457674528448,
                140457674528592,
                140457674528736,
                140457674529240,
                140457674529312,
                140457674529456,
                140457674529600,
                140457674530032,
                140457674530104,
                140457674530248,
                140457674530392,
                140457674080400,
                140457674080472,
                140457674080616,
                140457674080760,
                140457674081192,
                140457674081264,
                140457674081408,
                140457674081552,
                140457674082056,
                140457674082128,
                140457674082272,
                140457674082416,
                140457674082848,
                140457674082920,
                140457674083064,
                140457674083208,
                140457674083712,
                140457674083784,
                140457674083928,
                140457674084072,
                140457674150104,
                140457674150176,
                140457674150320,
                140457674150464,
                140457674151040,
                140457674151112,
                140457674151256,
                140457674151400,
                140457674151832,
                140457674151904,
                140457674152048,
                140457674152192,
                140457674152696,
                140457674152768,
                140457674152912,
                140457674153056,
                140457674153488,
                140457674153560,
                140457674153704,
                140457674153848,
                140457674211688,
                140457674211760
            ]
        }
    },
    "lr Scheduler": {
        "Type": "MultiStepLR",
        "State": {
            "milestones": {
                "150": 1,
                "250": 1
            },
            "gamma": 0.1,
            "base_lrs": [
                0.01
            ],
            "last_epoch": 0,
            "_step_count": 1,
            "_get_lr_called_within_step": false,
            "_last_lr": [
                0.01
            ]
        }
    },
    "Train Transform": [
        "RandomCrop(size=(32, 32), padding=4)",
        "RandomHorizontalFlip(p=0.5)",
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Test Transform": [
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Dataset": "CIFAR10",
    "TrainingTime": "1:43:11.646308",
    "InferenceTime": "0:00:01.156033",
    "Performance": {
        "Best_Train": 99.988,
        "Final_Train": 99.96,
        "Best_Test": 86.59,
        "Final_Test": 86.45,
        "Best_Loss": 799.5973211526871,
        "Final_Loss": 2.1411838736385107
    },
    "Class Performance": {
        "plane": 88.7,
        "car": 93.4,
        "bird": 80.3,
        "cat": 71.9,
        "deer": 88.4,
        "dog": 79.2,
        "frog": 90.4,
        "horse": 88.8,
        "ship": 92.8,
        "truck": 90.6
    },
    "Confusion Matrix": {
        "plane": "[887.0, 12.0, 17.0, 12.0, 15.0, 0.0, 5.0, 6.0, 31.0, 15.0]",
        "car": "[8.0, 934.0, 1.0, 2.0, 0.0, 0.0, 2.0, 0.0, 11.0, 42.0]",
        "bird": "[27.0, 0.0, 803.0, 39.0, 53.0, 31.0, 30.0, 7.0, 5.0, 5.0]",
        "cat": "[14.0, 4.0, 44.0, 719.0, 47.0, 108.0, 32.0, 19.0, 6.0, 7.0]",
        "deer": "[12.0, 3.0, 20.0, 26.0, 884.0, 15.0, 21.0, 16.0, 3.0, 0.0]",
        "dog": "[5.0, 2.0, 18.0, 113.0, 27.0, 792.0, 13.0, 26.0, 2.0, 2.0]",
        "frog": "[8.0, 2.0, 21.0, 36.0, 16.0, 10.0, 904.0, 0.0, 0.0, 3.0]",
        "horse": "[8.0, 1.0, 11.0, 22.0, 34.0, 29.0, 3.0, 888.0, 0.0, 4.0]",
        "ship": "[27.0, 10.0, 5.0, 8.0, 3.0, 2.0, 0.0, 2.0, 928.0, 15.0]",
        "truck": "[19.0, 37.0, 6.0, 5.0, 1.0, 1.0, 2.0, 6.0, 17.0, 906.0]"
    }
}