{
    "Model": "MyModel",
    "Model Size Trainable": 46170,
    "Model Size Total": 46170,
    "Model Structure": [
        "(conv_1): Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "(bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "(relu_1): ReLU(inplace=True)",
        "(highway_12): Sequential(",
        "  (0): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))",
        "  (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_13): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_14): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv2_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_2): ReLU(inplace=True)",
        "(highway_23): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_24): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv3_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_3): ReLU(inplace=True)",
        "(highway_34): Sequential(",
        "  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv4_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_4): ReLU(inplace=True)",
        "(avgPool): AdaptiveAvgPool2d(output_size=(1, 1))",
        "(fc): Linear(in_features=32, out_features=10, bias=True)"
    ],
    "Batch Size": 128,
    "Total Epoch": 350,
    "Device": "cuda",
    "Loss Function": "CrossEntropyLoss",
    "Optimizer": {
        "Type": "SGD",
        "State": {},
        "param_groups": {
            "lr": 0.1,
            "momentum": 0.9,
            "dampening": 0,
            "weight_decay": 0.0001,
            "nesterov": false,
            "initial_lr": 0.1,
            "params": [
                140247127895712,
                140247127895784,
                140247127895856,
                140247127929048,
                140247127929120,
                140247127929264,
                140247127929408,
                140247127929768,
                140247127929840,
                140247127929984,
                140247127930128,
                140247127930488,
                140247127930560,
                140247127930704,
                140247127930848,
                140247127931352,
                140247127931568,
                140247127931640,
                140247127932000,
                140247127932216,
                140247127932288,
                140247127932720,
                140247127990344,
                140247127990416,
                140247127990776,
                140247127990992,
                140247127991064,
                140247127991496,
                140247127991568,
                140247127991712,
                140247127991856,
                140247127992216,
                140247127992288,
                140247127992432,
                140247127992576,
                140247127993800,
                140247127994016,
                140247127994088,
                140247128047760,
                140247128047976,
                140247128048048,
                140247127992936,
                140247127993008,
                140247127993152,
                140247127993296,
                140247128048480,
                140247128048696,
                140247128048768,
                140247128049128,
                140247128049344,
                140247128049416,
                140247128049848,
                140247128049920,
                140247128050064,
                140247128050208,
                140247128051432,
                140247128051648,
                140247128113224,
                140247128113584,
                140247128113800,
                140247128113872,
                140247128050568,
                140247128050640,
                140247128050784,
                140247128050928,
                140247128114304,
                140247128114520,
                140247128114592,
                140247128114952,
                140247128115168,
                140247128115240,
                140247128115672,
                140247128115744
            ]
        }
    },
    "lr Scheduler": {
        "Type": "MultiStepLR",
        "State": {
            "milestones": {
                "150": 1,
                "250": 1
            },
            "gamma": 0.1,
            "base_lrs": [
                0.1
            ],
            "last_epoch": 0,
            "_step_count": 1,
            "_get_lr_called_within_step": false,
            "_last_lr": [
                0.1
            ]
        }
    },
    "TrainSet Size": 0.03125,
    "Train Transform": [
        "RandomCrop(size=(32, 32), padding=4)",
        "RandomHorizontalFlip(p=0.5)",
        "ToTensor()",
        "Normalize(mean=(0.4914, 0.4822, 0.4465), std=(0.247, 0.243, 0.261))"
    ],
    "Test Transform": [
        "ToTensor()",
        "Normalize(mean=(0.4914, 0.4822, 0.4465), std=(0.247, 0.243, 0.261))"
    ],
    "Dataset": "CIFAR10",
    "TrainingTime": "0:06:34.490820",
    "InferenceTime": "0:00:00.747796",
    "Performance": {
        "Best_Train": 99.67989756722152,
        "Final_Train": 99.42381562099872,
        "Best_Test": 61.34,
        "Final_Test": 60.95,
        "Best_Loss": 29.120434165000916,
        "Final_Loss": 0.7164238728582859
    },
    "Class Performance": {
        "plane": 66.6,
        "car": 71.1,
        "bird": 52.9,
        "cat": 40.2,
        "deer": 51.1,
        "dog": 52.6,
        "frog": 64.5,
        "horse": 66.7,
        "ship": 75.2,
        "truck": 68.6
    },
    "Confusion Matrix": {
        "plane": "[666.0, 32.0, 68.0, 20.0, 24.0, 22.0, 10.0, 17.0, 117.0, 24.0]",
        "car": "[64.0, 711.0, 15.0, 20.0, 9.0, 18.0, 12.0, 7.0, 29.0, 115.0]",
        "bird": "[90.0, 5.0, 529.0, 62.0, 96.0, 82.0, 56.0, 49.0, 19.0, 12.0]",
        "cat": "[28.0, 12.0, 100.0, 402.0, 57.0, 231.0, 80.0, 52.0, 19.0, 19.0]",
        "deer": "[35.0, 11.0, 102.0, 84.0, 511.0, 56.0, 77.0, 100.0, 20.0, 4.0]",
        "dog": "[11.0, 7.0, 100.0, 192.0, 55.0, 526.0, 17.0, 75.0, 9.0, 8.0]",
        "frog": "[13.0, 9.0, 96.0, 101.0, 73.0, 38.0, 645.0, 19.0, 4.0, 2.0]",
        "horse": "[24.0, 5.0, 62.0, 51.0, 97.0, 58.0, 10.0, 667.0, 5.0, 21.0]",
        "ship": "[117.0, 30.0, 18.0, 24.0, 11.0, 5.0, 13.0, 8.0, 752.0, 22.0]",
        "truck": "[56.0, 103.0, 17.0, 22.0, 14.0, 10.0, 14.0, 12.0, 66.0, 686.0]"
    }
}