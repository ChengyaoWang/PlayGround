{
    "Model": "MyModel",
    "Model Size Trainable": 46170,
    "Model Size Total": 46170,
    "Model Structure": [
        "(conv_1): Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "(bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "(relu_1): ReLU(inplace=True)",
        "(highway_12): Sequential(",
        "  (0): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))",
        "  (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_13): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_14): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv2_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_2): ReLU(inplace=True)",
        "(highway_23): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_24): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv3_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_3): ReLU(inplace=True)",
        "(highway_34): Sequential(",
        "  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv4_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_4): ReLU(inplace=True)",
        "(avgPool): AdaptiveAvgPool2d(output_size=(1, 1))",
        "(fc): Linear(in_features=32, out_features=10, bias=True)"
    ],
    "Batch Size": 128,
    "Total Epoch": 350,
    "Device": "cuda",
    "Loss Function": "CrossEntropyLoss",
    "Optimizer": {
        "Type": "SGD",
        "State": {},
        "param_groups": {
            "lr": 0.1,
            "momentum": 0.9,
            "dampening": 0,
            "weight_decay": 0.0001,
            "nesterov": false,
            "initial_lr": 0.1,
            "params": [
                140107753791280,
                140107753791424,
                140107753820232,
                140107753820592,
                140107753820664,
                140107753820808,
                140107753820952,
                140107753821168,
                140107753821240,
                140107753821384,
                140107753821528,
                140107753821888,
                140107753821960,
                140107753822104,
                140107753822248,
                140107753822752,
                140107753822968,
                140107753823040,
                140107753823400,
                140107753823616,
                140107753823688,
                140107753824120,
                140107753885840,
                140107753885912,
                140107753886272,
                140107753886488,
                140107753886560,
                140107753886992,
                140107753887064,
                140107753887208,
                140107753887352,
                140107753887712,
                140107753887784,
                140107753887928,
                140107753888072,
                140107753889296,
                140107753889512,
                140107753889584,
                140107753939160,
                140107753939376,
                140107753939448,
                140107753888432,
                140107753888504,
                140107753888648,
                140107753888792,
                140107753939880,
                140107753940096,
                140107753940168,
                140107753940528,
                140107753940744,
                140107753940816,
                140107753941248,
                140107753941320,
                140107753941464,
                140107753941608,
                140107753942832,
                140107754008648,
                140107754008720,
                140107754009080,
                140107754009296,
                140107754009368,
                140107753941968,
                140107753942040,
                140107753942184,
                140107753942328,
                140107754009800,
                140107754010016,
                140107754010088,
                140107754010448,
                140107754010664,
                140107754010736,
                140107754011096,
                140107754011168
            ]
        }
    },
    "lr Scheduler": {
        "Type": "MultiStepLR",
        "State": {
            "milestones": {
                "150": 1,
                "250": 1
            },
            "gamma": 0.1,
            "base_lrs": [
                0.1
            ],
            "last_epoch": 0,
            "_step_count": 1,
            "_get_lr_called_within_step": false,
            "_last_lr": [
                0.1
            ]
        }
    },
    "TrainSet Size": 0.5,
    "Train Transform": [
        "RandomCrop(size=(32, 32), padding=4)",
        "RandomHorizontalFlip(p=0.5)",
        "ToTensor()",
        "Normalize(mean=(0.4914, 0.4822, 0.4465), std=(0.247, 0.243, 0.261))"
    ],
    "Test Transform": [
        "ToTensor()",
        "Normalize(mean=(0.4914, 0.4822, 0.4465), std=(0.247, 0.243, 0.261))"
    ],
    "Dataset": "CIFAR10",
    "TrainingTime": "0:36:22.235324",
    "InferenceTime": "0:00:00.728525",
    "Performance": {
        "Best_Train": 94.816,
        "Final_Train": 94.696,
        "Best_Test": 84.74,
        "Final_Test": 84.45,
        "Best_Loss": 349.5665308237076,
        "Final_Loss": 33.524551555514336
    },
    "Class Performance": {
        "plane": 86.9,
        "car": 92.8,
        "bird": 77.1,
        "cat": 68.6,
        "deer": 82.4,
        "dog": 80.1,
        "frog": 88.2,
        "horse": 87.5,
        "ship": 90.2,
        "truck": 90.7
    },
    "Confusion Matrix": {
        "plane": "[869.0, 10.0, 29.0, 15.0, 14.0, 3.0, 6.0, 6.0, 31.0, 17.0]",
        "car": "[10.0, 928.0, 2.0, 1.0, 1.0, 1.0, 4.0, 3.0, 9.0, 41.0]",
        "bird": "[44.0, 2.0, 771.0, 32.0, 44.0, 32.0, 47.0, 18.0, 5.0, 5.0]",
        "cat": "[18.0, 3.0, 45.0, 686.0, 45.0, 118.0, 38.0, 31.0, 8.0, 8.0]",
        "deer": "[8.0, 2.0, 44.0, 40.0, 824.0, 31.0, 28.0, 21.0, 1.0, 1.0]",
        "dog": "[7.0, 2.0, 18.0, 107.0, 23.0, 801.0, 13.0, 25.0, 2.0, 2.0]",
        "frog": "[5.0, 1.0, 34.0, 44.0, 22.0, 6.0, 882.0, 6.0, 0.0, 0.0]",
        "horse": "[14.0, 3.0, 13.0, 18.0, 36.0, 31.0, 4.0, 875.0, 2.0, 4.0]",
        "ship": "[52.0, 15.0, 6.0, 5.0, 3.0, 2.0, 1.0, 0.0, 902.0, 14.0]",
        "truck": "[16.0, 40.0, 5.0, 6.0, 2.0, 3.0, 1.0, 2.0, 18.0, 907.0]"
    }
}