{
    "Model": "MyModel",
    "Model Size Trainable": 46170,
    "Model Size Total": 46170,
    "Model Structure": [
        "(conv_1): Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "(bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "(relu_1): ReLU(inplace=True)",
        "(highway_12): Sequential(",
        "  (0): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))",
        "  (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_13): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_14): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv2_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)"ÃŸ,
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_2): ReLU(inplace=True)",
        "(highway_23): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_24): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv3_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_3): ReLU(inplace=True)",
        "(highway_34): Sequential(",
        "  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv4_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_4): ReLU(inplace=True)",
        "(avgPool): AdaptiveAvgPool2d(output_size=(1, 1))",
        "(fc): Linear(in_features=32, out_features=10, bias=True)"
    ],
    "Batch Size": 128,
    "Total Epoch": 350,
    "Device": "cuda",
    "Loss Function": "CrossEntropyLoss",
    "Optimizer": {
        "Type": "SGD",
        "State": {},
        "param_groups": {
            "lr": 0.1,
            "momentum": 0.9,
            "dampening": 0,
            "weight_decay": 0.0001,
            "nesterov": false,
            "initial_lr": 0.1,
            "params": [
                140466078883704,
                140466078883632,
                140466078916680,
                140466078916968,
                140466078917040,
                140466078917184,
                140466078917328,
                140466078917688,
                140466078917760,
                140466078917904,
                140466078918048,
                140466078918408,
                140466078918480,
                140466078918624,
                140466078918768,
                140466078919272,
                140466078919488,
                140466078919560,
                140466078919920,
                140466078920136,
                140466078920208,
                140466078920640,
                140466078982360,
                140466078982432,
                140466078982792,
                140466078983008,
                140466078983080,
                140466078983512,
                140466078983584,
                140466078983728,
                140466078983872,
                140466078984232,
                140466078984304,
                140466078984448,
                140466078984592,
                140466078985816,
                140466078986032,
                140466078986104,
                140466079035680,
                140466079035896,
                140466079035968,
                140466078984952,
                140466078985024,
                140466078985168,
                140466078985312,
                140466079036400,
                140466079036616,
                140466079036688,
                140466079037048,
                140466079037264,
                140466079037336,
                140466079037768,
                140466079037840,
                140466079037984,
                140466079038128,
                140466079039352,
                140466079105168,
                140466079105240,
                140466079105600,
                140466079105816,
                140466079105888,
                140466079038488,
                140466079038560,
                140466079038704,
                140466079038848,
                140466079106320,
                140466079106536,
                140466079106608,
                140466079106968,
                140466079107184,
                140466079107256,
                140466079107616,
                140466079107688
            ]
        }
    },
    "lr Scheduler": {
        "Type": "MultiStepLR",
        "State": {
            "milestones": {
                "150": 1,
                "250": 1
            },
            "gamma": 0.1,
            "base_lrs": [
                0.1
            ],
            "last_epoch": 0,
            "_step_count": 1,
            "_get_lr_called_within_step": false,
            "_last_lr": [
                0.1
            ]
        }
    },
    "Train Transform": [
        "RandomCrop(size=(32, 32), padding=4)",
        "RandomHorizontalFlip(p=0.5)",
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Test Transform": [
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Dataset": "CIFAR10",
    "TrainingTime": "1:08:01.207825",
    "InferenceTime": "0:00:00.747688",
    "Performance": {
        "Best_Train": 93.634,
        "Final_Train": 93.42,
        "Best_Test": 88.16,
        "Final_Test": 87.89,
        "Best_Loss": 645.8291993141174,
        "Final_Loss": 78.40704230219126
    },
    "Class Performance": {
        "plane": 87.6,
        "car": 93.6,
        "bird": 84.5,
        "cat": 75.8,
        "deer": 89.3,
        "dog": 79.9,
        "frog": 92.2,
        "horse": 88.7,
        "ship": 93.3,
        "truck": 94
    },
    "Confusion Matrix": {
        "plane": "[876.0, 6.0, 32.0, 14.0, 10.0, 0.0, 7.0, 4.0, 41.0, 10.0]",
        "car": "[10.0, 936.0, 0.0, 2.0, 2.0, 0.0, 2.0, 0.0, 8.0, 40.0]",
        "bird": "[27.0, 1.0, 845.0, 23.0, 27.0, 21.0, 38.0, 10.0, 3.0, 5.0]",
        "cat": "[11.0, 3.0, 33.0, 758.0, 36.0, 91.0, 37.0, 19.0, 8.0, 4.0]",
        "deer": "[5.0, 0.0, 22.0, 23.0, 893.0, 19.0, 20.0, 13.0, 2.0, 3.0]",
        "dog": "[6.0, 1.0, 24.0, 109.0, 28.0, 799.0, 9.0, 21.0, 2.0, 1.0]",
        "frog": "[4.0, 1.0, 22.0, 26.0, 11.0, 3.0, 922.0, 6.0, 1.0, 4.0]",
        "horse": "[7.0, 0.0, 16.0, 22.0, 36.0, 21.0, 3.0, 887.0, 0.0, 8.0]",
        "ship": "[33.0, 5.0, 3.0, 5.0, 2.0, 0.0, 2.0, 2.0, 933.0, 15.0]",
        "truck": "[13.0, 21.0, 3.0, 5.0, 1.0, 0.0, 2.0, 0.0, 15.0, 940.0]"
    }
}