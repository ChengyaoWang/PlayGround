{
    "Model": "MyModel",
    "Model Size Trainable": 70586,
    "Model Size Total": 70586,
    "Model Structure": [
        "(conv_1): Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "(bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "(relu_1): ReLU(inplace=True)",
        "(highway_12): Sequential(",
        "  (0): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))",
        "  (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_13): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_14): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv2_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        "  (2): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_2): ReLU(inplace=True)",
        "(highway_23): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_24): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv3_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        "  (2): ResidualBlock(",
        "    (conv_1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_3): ReLU(inplace=True)",
        "(highway_34): Sequential(",
        "  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv4_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        "  (2): ResidualBlock(",
        "    (conv_1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_4): ReLU(inplace=True)",
        "(avgPool): AdaptiveAvgPool2d(output_size=(1, 1))",
        "(fc): Linear(in_features=32, out_features=10, bias=True)"
    ],
    "Batch Size": 128,
    "Total Epoch": 350,
    "Device": "cuda",
    "Loss Function": "CrossEntropyLoss",
    "Optimizer": {
        "Type": "SGD",
        "State": {},
        "param_groups": {
            "lr": 0.1,
            "momentum": 0.9,
            "dampening": 0,
            "weight_decay": 0.00005,
            "nesterov": false,
            "initial_lr": 0.1,
            "params": [
                140258518334632,
                140258518334776,
                140258518334848,
                140258518335208,
                140258518335280,
                140258518376520,
                140258518376592,
                140258518376952,
                140258518377024,
                140258518377168,
                140258518377312,
                140258518377672,
                140258518377744,
                140258518377888,
                140258518378032,
                140258518378536,
                140258518378752,
                140258518378824,
                140258518379184,
                140258518379400,
                140258518379472,
                140258518379904,
                140258518380120,
                140258518380192,
                140258518437960,
                140258518438176,
                140258518438248,
                140258518438680,
                140258518438896,
                140258518438968,
                140258518439328,
                140258518439544,
                140258518439616,
                140258518440048,
                140258518440120,
                140258518440264,
                140258518440408,
                140258518440768,
                140258518440840,
                140258518440984,
                140258518441128,
                140258518495664,
                140258518495880,
                140258518495952,
                140258518496312,
                140258518496528,
                140258518496600,
                140258518441488,
                140258518441560,
                140258518441704,
                140258518441848,
                140258518497032,
                140258518497248,
                140258518497320,
                140258518497680,
                140258518497896,
                140258518497968,
                140258518498400,
                140258518498616,
                140258518498688,
                140258518499048,
                140258518499264,
                140258518564936,
                140258518565368,
                140258518565440,
                140258518565584,
                140258518565728,
                140258518566952,
                140258518567168,
                140258518567240,
                140258518567600,
                140258518567816,
                140258518567888,
                140258518566088,
                140258518566160,
                140258518566304,
                140258518566448,
                140258518568320,
                140258518568536,
                140258518568608,
                140258518106184,
                140258518106400,
                140258518106472,
                140258518106904,
                140258518107120,
                140258518107192,
                140258518107552,
                140258518107768,
                140258518107840,
                140258518108272,
                140258518108344
            ]
        }
    },
    "lr Scheduler": {
        "Type": "MultiStepLR",
        "State": {
            "milestones": {
                "150": 1,
                "250": 1
            },
            "gamma": 0.1,
            "base_lrs": [
                0.1
            ],
            "last_epoch": 0,
            "_step_count": 1,
            "_get_lr_called_within_step": false,
            "_last_lr": [
                0.1
            ]
        }
    },
    "Train Transform": [
        "RandomCrop(size=(32, 32), padding=4)",
        "RandomHorizontalFlip(p=0.5)",
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Test Transform": [
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Dataset": "CIFAR10",
    "TrainingTime": "1:22:55.059658",
    "InferenceTime": "0:00:00.877253",
    "Performance": {
        "Best_Train": 96.834,
        "Final_Train": 96.72,
        "Best_Test": 89,
        "Final_Test": 88.57,
        "Best_Loss": 628.132227897644,
        "Final_Loss": 42.57979513332248
    },
    "Class Performance": {
        "plane": 89.6,
        "car": 95.2,
        "bird": 85.5,
        "cat": 73.1,
        "deer": 89.1,
        "dog": 86.1,
        "frog": 92.4,
        "horse": 89.6,
        "ship": 93.6,
        "truck": 91.5
    },
    "Confusion Matrix": {
        "plane": "[896.0, 12.0, 26.0, 7.0, 8.0, 1.0, 4.0, 6.0, 29.0, 11.0]",
        "car": "[5.0, 952.0, 0.0, 1.0, 1.0, 2.0, 2.0, 1.0, 9.0, 27.0]",
        "bird": "[27.0, 2.0, 855.0, 16.0, 37.0, 19.0, 28.0, 10.0, 2.0, 4.0]",
        "cat": "[10.0, 3.0, 31.0, 731.0, 34.0, 122.0, 30.0, 24.0, 7.0, 8.0]",
        "deer": "[6.0, 2.0, 26.0, 17.0, 891.0, 20.0, 18.0, 19.0, 1.0, 0.0]",
        "dog": "[6.0, 0.0, 15.0, 69.0, 17.0, 861.0, 14.0, 16.0, 1.0, 1.0]",
        "frog": "[4.0, 1.0, 22.0, 21.0, 13.0, 9.0, 924.0, 4.0, 1.0, 1.0]",
        "horse": "[8.0, 2.0, 10.0, 17.0, 33.0, 23.0, 6.0, 896.0, 4.0, 1.0]",
        "ship": "[33.0, 9.0, 4.0, 4.0, 1.0, 1.0, 3.0, 1.0, 936.0, 8.0]",
        "truck": "[15.0, 39.0, 3.0, 3.0, 0.0, 2.0, 2.0, 1.0, 20.0, 915.0]"
    }
}