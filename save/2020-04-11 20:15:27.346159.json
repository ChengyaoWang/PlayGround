{
    "Model": "ResNet20v1_FOR_CIFAR",
    "Model Size Trainable": 272570,
    "Model Size Total": 272570,
    "Model Structure": [
        "(conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "(bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "(relu): ReLU(inplace=True)",
        "(conv2_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (2): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(conv3_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (2): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(conv4_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (2): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(avgPool): AdaptiveAvgPool2d(output_size=(1, 1))",
        "(fc): Linear(in_features=64, out_features=10, bias=True)"
    ],
    "Batch Size": 128,
    "Total Epoch": 300,
    "Device": "cuda",
    "Loss Function": "CrossEntropyLoss",
    "Optimizer": {
        "Type": "SGD",
        "State": {},
        "param_groups": {
            "lr": 0.1,
            "momentum": 0.9,
            "dampening": 0,
            "weight_decay": 0.0005,
            "nesterov": false,
            "initial_lr": 0.1,
            "params": [
                140046296111072,
                140046296111216,
                140046296111288,
                140046300132984,
                140046296110928,
                140046296111576,
                140046296111936,
                140046296112152,
                140046296112224,
                140046296112656,
                140046296112872,
                140046296112944,
                140046296215768,
                140046296215984,
                140046296216056,
                140046296216488,
                140046296216704,
                140046296216776,
                140046296217136,
                140046296217352,
                140046296217424,
                140046296218720,
                140046296218936,
                140046296219008,
                140046296219368,
                140046296219584,
                140046295707720,
                140046296217856,
                140046296217928,
                140046296218072,
                140046296218216,
                140046295708152,
                140046295708368,
                140046295708440,
                140046295708800,
                140046295709016,
                140046295709088,
                140046295709520,
                140046295709736,
                140046295709808,
                140046295710168,
                140046295710384,
                140046295710456,
                140046295711680,
                140046295777496,
                140046295777568,
                140046295777928,
                140046295778144,
                140046295778216,
                140046295710816,
                140046295710888,
                140046295711032,
                140046295711176,
                140046295778648,
                140046295778864,
                140046295778936,
                140046295779296,
                140046295779512,
                140046295779584,
                140046295780016,
                140046295780232,
                140046295780304,
                140046295780664,
                140046295780880,
                140046295780952,
                140046295781312,
                140046295834696
            ]
        }
    },
    "lr Scheduler": {
        "Type": "MultiStepLR",
        "State": {
            "milestones": {
                "150": 1,
                "250": 1
            },
            "gamma": 0.1,
            "base_lrs": [
                0.1
            ],
            "last_epoch": 0,
            "_step_count": 1,
            "_get_lr_called_within_step": false,
            "_last_lr": [
                0.1
            ]
        }
    },
    "Train Transform": [
        "RandomCrop(size=(32, 32), padding=4)",
        "RandomHorizontalFlip(p=0.5)",
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Test Transform": [
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Dataset": "CIFAR10",
    "TrainingTime": "1:29:21.065949",
    "InferenceTime": "0:00:01.072077",
    "Performance": {
        "Best_Train": 99.836,
        "Final_Train": 99.818,
        "Best_Test": 92.97,
        "Final_Test": 92.97,
        "Best_Loss": 620.354630947113,
        "Final_Loss": 7.6809793105348945
    },
    "Class Performance": {
        "plane": 93.7,
        "car": 96.7,
        "bird": 89.8,
        "cat": 85.8,
        "deer": 95.4,
        "dog": 86.6,
        "frog": 96.3,
        "horse": 95.5,
        "ship": 95,
        "truck": 94.9
    },
    "Confusion Matrix": {
        "plane": "[937.0, 4.0, 14.0, 6.0, 5.0, 0.0, 3.0, 3.0, 16.0, 12.0]",
        "car": "[6.0, 967.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 22.0]",
        "bird": "[24.0, 0.0, 898.0, 15.0, 22.0, 12.0, 23.0, 2.0, 4.0, 0.0]",
        "cat": "[9.0, 1.0, 21.0, 858.0, 21.0, 65.0, 12.0, 6.0, 5.0, 2.0]",
        "deer": "[3.0, 1.0, 12.0, 7.0, 954.0, 12.0, 5.0, 6.0, 0.0, 0.0]",
        "dog": "[7.0, 0.0, 16.0, 74.0, 17.0, 866.0, 5.0, 13.0, 2.0, 0.0]",
        "frog": "[4.0, 0.0, 10.0, 11.0, 6.0, 2.0, 963.0, 1.0, 2.0, 1.0]",
        "horse": "[4.0, 0.0, 2.0, 11.0, 15.0, 10.0, 0.0, 955.0, 2.0, 1.0]",
        "ship": "[30.0, 2.0, 5.0, 2.0, 1.0, 0.0, 3.0, 0.0, 950.0, 7.0]",
        "truck": "[10.0, 27.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 949.0]"
    }
}