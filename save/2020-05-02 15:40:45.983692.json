{
    "Model": "MyModel",
    "Model Size Trainable": 46170,
    "ModelSize Total": 46170,
    "Model Structure": [
        "(conv_1): Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "(bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "(relu_1): ReLU(inplace=True)",
        "(highway_12): Sequential(",
        "  (0): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))",
        "  (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_13): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_14): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv2_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_2): ReLU(inplace=True)",
        "(highway_23): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_24): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv3_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_3): ReLU(inplace=True)",
        "(highway_34): Sequential(",
        "  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv4_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_4): ReLU(inplace=True)",
        "(avgPool): AdaptiveAvgPool2d(output_size=(1, 1))",
        "(fc): Linear(in_features=32, out_features=10, bias=True)"
    ],
    "Batch Size": 128,
    "Total Epoch": 350,
    "Device": "cuda",
    "Loss Function": "CrossEntropyLoss",
    "Optimizer": {
        "Type": "SGD",
        "State": {},
        "param_groups": {
            "lr": 0.1,
            "momentum": 0.9,
            "dampening": 0,
            "weight_decay": 0.0001,
            "nesterov": false,
            "initial_lr": 0.1,
            "params": [
                140262253419760,
                140262253419904,
                140262253419976,
                140262253420336,
                140262253420408,
                140262253457480,
                140262253457624,
                140262253457984,
                140262253458056,
                140262253458200,
                140262253458344,
                140262253458704,
                140262253458776,
                140262253458920,
                140262253459064,
                140262253459568,
                140262253459784,
                140262253459856,
                140262253460216,
                140262253460432,
                140262253460504,
                140262253460936,
                140262253461152,
                140262253461224,
                140262253518992,
                140262253519208,
                140262253519280,
                140262253519712,
                140262253519784,
                140262253519928,
                140262253520072,
                140262253520432,
                140262253520504,
                140262253520648,
                140262253520792,
                140262253522016,
                140262253522232,
                140262253522304,
                140262253522664,
                140262253522880,
                140262253576264,
                140262253521152,
                140262253521224,
                140262253521368,
                140262253521512,
                140262253576696,
                140262253576912,
                140262253576984,
                140262253577344,
                140262253577560,
                140262253577632,
                140262253578064,
                140262253578136,
                140262253578280,
                140262253578424,
                140262253579648,
                140262253579864,
                140262253579936,
                140262253641800,
                140262253642016,
                140262253642088,
                140262253578784,
                140262253578856,
                140262253579000,
                140262253579144,
                140262253642520,
                140262253642736,
                140262253642808,
                140262253643168,
                140262253643384,
                140262253643456,
                140262253643888,
                140262253643960
            ]
        }
    },
    "lr Scheduler": {
        "Type": "MultiStepLR",
        "State": {
            "milestones": {
                "150": 1,
                "250": 1
            },
            "gamma": 0.1,
            "base_lrs": [
                0.1
            ],
            "last_epoch": 0,
            "_step_count": 1,
            "_get_lr_called_within_step": false,
            "_last_lr": [
                0.1
            ]
        }
    },
    "TrainSet Size": 0.8,
    "Train Transform": [
        "RandomCrop(size=(32, 32), padding=4)",
        "RandomHorizontalFlip(p=0.5)",
        "ToTensor()",
        "Normalize(mean=(0.4914, 0.4822, 0.4465), std=(0.247, 0.243, 0.261))"
    ],
    "Test Transform": [
        "ToTensor()",
        "Normalize(mean=(0.4914, 0.4822, 0.4465), std=(0.247, 0.243, 0.261))"
    ],
    "Dataset": "CIFAR10",
    "TrainingTime": "0:55:28.230496",
    "InferenceTime": "0:00:00.744357",
    "Performance": {
        "Best_Train": 93.89,
        "Final_Train": 93.645,
        "Best_Test": 87.06,
        "Final_Test": 86.6,
        "Best_Loss": 523.7293374538422,
        "Final_Loss": 59.82688715308905
    },
    "Class Performance": {
        "plane": 88.3,
        "car": 94.7,
        "bird": 80.9,
        "cat": 72.1,
        "deer": 87.4,
        "dog": 79.2,
        "frog": 91.6,
        "horse": 88.3,
        "ship": 93.1,
        "truck": 90.4
    },
    "Confusion Matrix": {
        "plane": "[883.0, 10.0, 28.0, 14.0, 6.0, 1.0, 6.0, 3.0, 40.0, 9.0]",
        "car": "[6.0, 947.0, 1.0, 1.0, 1.0, 1.0, 2.0, 0.0, 10.0, 31.0]",
        "bird": "[34.0, 2.0, 809.0, 29.0, 46.0, 23.0, 42.0, 8.0, 3.0, 4.0]",
        "cat": "[18.0, 4.0, 33.0, 721.0, 42.0, 107.0, 36.0, 23.0, 7.0, 9.0]",
        "deer": "[12.0, 0.0, 25.0, 23.0, 874.0, 18.0, 25.0, 18.0, 3.0, 2.0]",
        "dog": "[5.0, 1.0, 30.0, 112.0, 21.0, 792.0, 12.0, 21.0, 4.0, 2.0]",
        "frog": "[6.0, 0.0, 26.0, 23.0, 14.0, 6.0, 916.0, 3.0, 3.0, 3.0]",
        "horse": "[13.0, 0.0, 16.0, 15.0, 34.0, 26.0, 7.0, 883.0, 1.0, 5.0]",
        "ship": "[33.0, 6.0, 4.0, 4.0, 1.0, 1.0, 4.0, 2.0, 931.0, 14.0]",
        "truck": "[14.0, 49.0, 2.0, 5.0, 2.0, 0.0, 2.0, 1.0, 21.0, 904.0]"
    }
}