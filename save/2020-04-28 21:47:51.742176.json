{
    "Model": "SqueezeNet_Basic",
    "Model Size Trainable": 740554,
    "Model Size Total": 740554,
    "Model Structure": [
        "(conv_1): Conv2d(3, 96, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))",
        "(relu_1): ReLU(inplace=True)",
        "(maxpool_1): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)",
        "(fire_2): fireModule(",
        "  (conv_1): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1))",
        "  (relu_1): ReLU(inplace=True)",
        "  (conv_21): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1))",
        "  (conv_23): Conv2d(16, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
        "  (relu_2): ReLU(inplace=True)",
        ")",
        "(fire_3): fireModule(",
        "  (conv_1): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))",
        "  (relu_1): ReLU(inplace=True)",
        "  (conv_21): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1))",
        "  (conv_23): Conv2d(16, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
        "  (relu_2): ReLU(inplace=True)",
        ")",
        "(fire_4): fireModule(",
        "  (conv_1): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))",
        "  (relu_1): ReLU(inplace=True)",
        "  (conv_21): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1))",
        "  (conv_23): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
        "  (relu_2): ReLU(inplace=True)",
        ")",
        "(maxpool_2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)",
        "(fire_5): fireModule(",
        "  (conv_1): Conv2d(256, 32, kernel_size=(1, 1), stride=(1, 1))",
        "  (relu_1): ReLU(inplace=True)",
        "  (conv_21): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1))",
        "  (conv_23): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
        "  (relu_2): ReLU(inplace=True)",
        ")",
        "(fire_6): fireModule(",
        "  (conv_1): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1))",
        "  (relu_1): ReLU(inplace=True)",
        "  (conv_21): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1))",
        "  (conv_23): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
        "  (relu_2): ReLU(inplace=True)",
        ")",
        "(fire_7): fireModule(",
        "  (conv_1): Conv2d(384, 48, kernel_size=(1, 1), stride=(1, 1))",
        "  (relu_1): ReLU(inplace=True)",
        "  (conv_21): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1))",
        "  (conv_23): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
        "  (relu_2): ReLU(inplace=True)",
        ")",
        "(fire_8): fireModule(",
        "  (conv_1): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))",
        "  (relu_1): ReLU(inplace=True)",
        "  (conv_21): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))",
        "  (conv_23): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
        "  (relu_2): ReLU(inplace=True)",
        ")",
        "(maxpool_3): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)",
        "(fire_9): fireModule(",
        "  (conv_1): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))",
        "  (relu_1): ReLU(inplace=True)",
        "  (conv_21): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))",
        "  (conv_23): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))",
        "  (relu_2): ReLU(inplace=True)",
        ")",
        "(dropout): Dropout(p=0.5, inplace=False)",
        "(conv_10): Conv2d(512, 10, kernel_size=(1, 1), stride=(1, 1))",
        "(relu_2): ReLU(inplace=True)",
        "(avgpool): AdaptiveAvgPool2d(output_size=(1, 1))"
    ],
    "Batch Size": 128,
    "Total Epoch": 350,
    "Device": "cuda",
    "Loss Function": "CrossEntropyLoss",
    "Optimizer": {
        "Type": "SGD",
        "State": {},
        "param_groups": {
            "lr": 0.004,
            "momentum": 0.9,
            "dampening": 0,
            "weight_decay": 0.0005,
            "nesterov": false,
            "initial_lr": 0.004,
            "params": [
                140012780671696,
                140012780671768,
                140012780671624,
                140012780671840,
                140012780671912,
                140012780671984,
                140012780672056,
                140012780672128,
                140012780672200,
                140012780672272,
                140012780672344,
                140012780672416,
                140012780672488,
                140012780672560,
                140012780672632,
                140012780672704,
                140012780672776,
                140012780672848,
                140012780672920,
                140012780672992,
                140012780673064,
                140012780673136,
                140012780673208,
                140012780673280,
                140012780673352,
                140012780673424,
                140012780673496,
                140012780673568,
                140012780673712,
                140012780673856,
                140012780674000,
                140012780674144,
                140012780674360,
                140012780674432,
                140012780674576,
                140012780674720,
                140012780674864,
                140012780675008,
                140012780806360,
                140012780806432,
                140012780806576,
                140012780806720,
                140012780806864,
                140012780807008,
                140012780807296,
                140012780807368,
                140012780807512,
                140012780807656,
                140012780807800,
                140012780807944,
                140012780808160,
                140012780808232
            ]
        }
    },
    "lr Scheduler": {
        "Type": "MultiStepLR",
        "State": {
            "milestones": {
                "150": 1,
                "250": 1
            },
            "gamma": 0.1,
            "base_lrs": [
                0.004
            ],
            "last_epoch": 0,
            "_step_count": 1,
            "_get_lr_called_within_step": false,
            "_last_lr": [
                0.004
            ]
        }
    },
    "Train Transform": [
        "RandomCrop(size=(32, 32), padding=4)",
        "RandomHorizontalFlip(p=0.5)",
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Test Transform": [
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Dataset": "CIFAR10",
    "TrainingTime": "1:06:51.854059",
    "InferenceTime": "0:00:00.804392",
    "Performance": {
        "Best_Train": 92.012,
        "Final_Train": 91.8,
        "Best_Test": 85.09,
        "Final_Test": 84.92,
        "Best_Loss": 895.2225835323334,
        "Final_Loss": 94.07418789714575
    },
    "Class Performance": {
        "plane": 87.1,
        "car": 93,
        "bird": 78.3,
        "cat": 69.1,
        "deer": 85,
        "dog": 79.6,
        "frog": 88.5,
        "horse": 87.7,
        "ship": 90.9,
        "truck": 90
    },
    "Confusion Matrix": {
        "plane": "[871.0, 10.0, 24.0, 16.0, 9.0, 2.0, 7.0, 6.0, 30.0, 25.0]",
        "car": "[7.0, 930.0, 3.0, 1.0, 1.0, 2.0, 4.0, 1.0, 10.0, 41.0]",
        "bird": "[46.0, 0.0, 783.0, 30.0, 32.0, 47.0, 34.0, 21.0, 2.0, 5.0]",
        "cat": "[17.0, 2.0, 41.0, 691.0, 42.0, 126.0, 35.0, 29.0, 9.0, 8.0]",
        "deer": "[10.0, 3.0, 27.0, 34.0, 850.0, 25.0, 20.0, 29.0, 1.0, 1.0]",
        "dog": "[8.0, 4.0, 22.0, 100.0, 33.0, 796.0, 10.0, 22.0, 2.0, 3.0]",
        "frog": "[7.0, 3.0, 36.0, 35.0, 17.0, 12.0, 885.0, 2.0, 1.0, 2.0]",
        "horse": "[9.0, 2.0, 18.0, 26.0, 27.0, 34.0, 2.0, 877.0, 1.0, 4.0]",
        "ship": "[47.0, 12.0, 7.0, 8.0, 2.0, 0.0, 1.0, 0.0, 909.0, 14.0]",
        "truck": "[21.0, 47.0, 2.0, 3.0, 0.0, 2.0, 3.0, 5.0, 17.0, 900.0]"
    }
}