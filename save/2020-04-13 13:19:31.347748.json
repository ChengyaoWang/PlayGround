{
    "Model": "ResNet56v1_FOR_CIFAR",
    "Model Size Trainable": 855866,
    "Model Size Total": 855866,
    "Model Structure": [
        "(conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "(bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "(relu): ReLU(inplace=True)",
        "(conv2_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (2): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (3): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (4): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (5): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (6): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (7): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (8): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(conv3_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (2): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (3): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (4): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (5): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (6): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (7): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (8): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(conv4_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (2): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (3): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (4): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (5): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (6): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (7): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (8): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(avgPool): AdaptiveAvgPool2d(output_size=(1, 1))",
        "(fc): Linear(in_features=64, out_features=10, bias=True)"
    ],
    "Batch Size": 128,
    "Total Epoch": 350,
    "Device": "cuda",
    "Loss Function": "CrossEntropyLoss",
    "Optimizer": {
        "Type": "SGD",
        "State": {},
        "param_groups": {
            "lr": 0.1,
            "momentum": 0.9,
            "dampening": 0,
            "weight_decay": 0.0005,
            "nesterov": false,
            "initial_lr": 0.1,
            "params": [
                139916959119544,
                139916959119688,
                139916959119760,
                139917047107520,
                139916959119400,
                139916959119976,
                139916959120336,
                139916959120552,
                139916959120624,
                139916959121056,
                139916959121272,
                139916959121344,
                139916959199592,
                139916959199808,
                139916959199880,
                139916959200312,
                139916959200528,
                139916959200600,
                139916959200960,
                139916959201176,
                139916959201248,
                139916959201680,
                139916959201896,
                139916959201968,
                139916959202328,
                139916959202544,
                139916959202616,
                139916959203048,
                139916959203264,
                139916958707784,
                139916958708144,
                139916958708360,
                139916958708432,
                139916958708864,
                139916958709080,
                139916958709152,
                139916958709512,
                139916958709728,
                139916958709800,
                139916958710232,
                139916958710448,
                139916958710520,
                139916958710880,
                139916958711096,
                139916958711168,
                139916958711600,
                139916958773320,
                139916958773392,
                139916958773752,
                139916958773968,
                139916958774040,
                139916958774472,
                139916958774688,
                139916958774760,
                139916958775120,
                139916958775336,
                139916958775408,
                139916958776632,
                139916958776848,
                139916958776920,
                139916958777280,
                139916958830808,
                139916958830880,
                139916958775768,
                139916958775840,
                139916958775984,
                139916958776128,
                139916958831312,
                139916958831528,
                139916958831600,
                139916958831960,
                139916958832176,
                139916958832248,
                139916958832680,
                139916958832896,
                139916958832968,
                139916958833328,
                139916958833544,
                139916958833616,
                139916958834048,
                139916958834264,
                139916958834336,
                139916958896200,
                139916958896416,
                139916958896488,
                139916958896920,
                139916958897136,
                139916958897208,
                139916958897568,
                139916958897784,
                139916958897856,
                139916958898288,
                139916958898504,
                139916958898576,
                139916958898936,
                139916958899152,
                139916958899224,
                139916958899656,
                139916958899872,
                139916958899944,
                139916958441616,
                139916958441832,
                139916958441904,
                139916958442336,
                139916958442552,
                139916958442624,
                139916958442984,
                139916958443200,
                139916958443272,
                139916958443704,
                139916958443920,
                139916958443992,
                139916958444352,
                139916958444568,
                139916958444640,
                139916958511464,
                139916958511680,
                139916958511752,
                139916958512112,
                139916958512328,
                139916958512400,
                139916958445000,
                139916958445072,
                139916958445216,
                139916958445360,
                139916958512832,
                139916958513048,
                139916958513120,
                139916958513480,
                139916958513696,
                139916958513768,
                139916958514200,
                139916958514416,
                139916958514488,
                139916958514848,
                139916958515064,
                139916958515136,
                139916958568880,
                139916958569096,
                139916958569168,
                139916958569528,
                139916958569744,
                139916958569816,
                139916958570248,
                139916958570464,
                139916958570536,
                139916958570896,
                139916958571112,
                139916958571184,
                139916958571616,
                139916958571832,
                139916958571904,
                139916958572264,
                139916958572480,
                139916958642248,
                139916958642680,
                139916958642896,
                139916958642968,
                139916958643328,
                139916958643544,
                139916958643616,
                139916958644048,
                139916958644264,
                139916958644336,
                139916958644696,
                139916958644912,
                139916958644984,
                139916958645416,
                139916958645632,
                139916958645704,
                139916958646064,
                139916958179400,
                139916958179472,
                139916958179832,
                139916958179904
            ]
        }
    },
    "lr Scheduler": {
        "Type": "MultiStepLR",
        "State": {
            "milestones": {
                "150": 1,
                "250": 1
            },
            "gamma": 0.1,
            "base_lrs": [
                0.1
            ],
            "last_epoch": 0,
            "_step_count": 1,
            "_get_lr_called_within_step": false,
            "_last_lr": [
                0.1
            ]
        }
    },
    "Train Transform": [
        "RandomCrop(size=(32, 32), padding=4)",
        "RandomHorizontalFlip(p=0.5)",
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Test Transform": [
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Dataset": "CIFAR10",
    "TrainingTime": "4:41:08.259886",
    "InferenceTime": "0:00:02.258145",
    "Performance": {
        "Best_Train": 99.998,
        "Final_Train": 99.986,
        "Best_Test": 94.21,
        "Final_Test": 93.89,
        "Best_Loss": 911.7582576274872,
        "Final_Loss": 1.2820171061903238
    },
    "Class Performance": {
        "plane": 95,
        "car": 98.1,
        "bird": 91.6,
        "cat": 86.5,
        "deer": 95.7,
        "dog": 90.7,
        "frog": 95.3,
        "horse": 95.9,
        "ship": 95.5,
        "truck": 94.6
    },
    "Confusion Matrix": {
        "plane": "[950.0, 2.0, 9.0, 9.0, 1.0, 0.0, 4.0, 1.0, 16.0, 8.0]",
        "car": "[1.0, 981.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0]",
        "bird": "[19.0, 0.0, 916.0, 16.0, 14.0, 14.0, 16.0, 1.0, 3.0, 1.0]",
        "cat": "[7.0, 2.0, 11.0, 865.0, 15.0, 74.0, 15.0, 4.0, 4.0, 3.0]",
        "deer": "[3.0, 1.0, 11.0, 13.0, 957.0, 2.0, 5.0, 6.0, 2.0, 0.0]",
        "dog": "[2.0, 1.0, 12.0, 50.0, 10.0, 907.0, 6.0, 11.0, 1.0, 0.0]",
        "frog": "[3.0, 0.0, 19.0, 14.0, 4.0, 6.0, 953.0, 1.0, 0.0, 0.0]",
        "horse": "[6.0, 0.0, 3.0, 6.0, 12.0, 11.0, 1.0, 959.0, 2.0, 0.0]",
        "ship": "[19.0, 10.0, 3.0, 4.0, 2.0, 0.0, 3.0, 0.0, 955.0, 4.0]",
        "truck": "[9.0, 29.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 10.0, 946.0]"
    }
}