{
    "Model": "ResNet32v1_FOR_CIFAR",
    "Model Size Trainable": 467002,
    "Model Size Total": 467002,
    "Model Structure": [
        "(conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "(bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "(relu): ReLU(inplace=True)",
        "(conv2_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (2): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (3): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (4): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(conv3_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (2): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (3): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (4): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(conv4_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (2): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (3): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (4): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(avgPool): AdaptiveAvgPool2d(output_size=(1, 1))",
        "(fc): Linear(in_features=64, out_features=10, bias=True)"
    ],
    "Batch Size": 128,
    "Total Epoch": 350,
    "Device": "cuda",
    "Loss Function": "CrossEntropyLoss",
    "Optimizer": {
        "Type": "SGD",
        "State": {},
        "param_groups": {
            "lr": 0.1,
            "momentum": 0.9,
            "dampening": 0,
            "weight_decay": 0.0005,
            "nesterov": false,
            "initial_lr": 0.1,
            "params": [
                139986513291232,
                139986513291376,
                139986513291448,
                139986517313360,
                139986513291088,
                139986513291736,
                139986513292096,
                139986513292312,
                139986513292384,
                139986513292816,
                139986513293032,
                139986513293104,
                139986513391832,
                139986513392048,
                139986513392120,
                139986513392552,
                139986513392768,
                139986513392840,
                139986513393200,
                139986513393416,
                139986513393488,
                139986513393920,
                139986513394136,
                139986513394208,
                139986513394568,
                139986513394784,
                139986513394856,
                139986513395288,
                139986513395504,
                139986513395576,
                139986512892192,
                139986512892408,
                139986512892480,
                139986512893704,
                139986512893920,
                139986512893992,
                139986512894352,
                139986512894568,
                139986512894640,
                139986512892840,
                139986512892912,
                139986512893056,
                139986512893200,
                139986512895072,
                139986512895288,
                139986512895360,
                139986512895720,
                139986512895936,
                139986512961608,
                139986512962040,
                139986512962256,
                139986512962328,
                139986512962688,
                139986512962904,
                139986512962976,
                139986512963408,
                139986512963624,
                139986512963696,
                139986512964056,
                139986512964272,
                139986512964344,
                139986512964776,
                139986512964992,
                139986512965064,
                139986512965424,
                139986513018952,
                139986513019024,
                139986513020248,
                139986513020464,
                139986513020536,
                139986513020896,
                139986513021112,
                139986513021184,
                139986513019384,
                139986513019456,
                139986513019600,
                139986513019744,
                139986513021616,
                139986513021832,
                139986513021904,
                139986513022264,
                139986513022480,
                139986513022552,
                139986513084488,
                139986513084704,
                139986513084776,
                139986513085136,
                139986513085352,
                139986513085424,
                139986513085856,
                139986513086072,
                139986513086144,
                139986513086504,
                139986513086720,
                139986513086792,
                139986513087224,
                139986513087440,
                139986513087512,
                139986513087872,
                139986513088088,
                139986513088160,
                139986512629832,
                139986512629904
            ]
        }
    },
    "lr Scheduler": {
        "Type": "MultiStepLR",
        "State": {
            "milestones": {
                "150": 1,
                "250": 1
            },
            "gamma": 0.1,
            "base_lrs": [
                0.1
            ],
            "last_epoch": 0,
            "_step_count": 1,
            "_get_lr_called_within_step": false,
            "_last_lr": [
                0.1
            ]
        }
    },
    "Train Transform": [
        "RandomCrop(size=(32, 32), padding=4)",
        "RandomHorizontalFlip(p=0.5)",
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Test Transform": [
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Dataset": "CIFAR10",
    "TrainingTime": "2:45:23.471098",
    "InferenceTime": "0:00:01.485448",
    "Performance": {
        "Best_Train": 99.994,
        "Final_Train": 99.98,
        "Best_Test": 93.56,
        "Final_Test": 93.46,
        "Best_Loss": 708.1551679372787,
        "Final_Loss": 2.236609561368823
    },
    "Class Performance": {
        "plane": 94.6,
        "car": 96.8,
        "bird": 89.7,
        "cat": 85.8,
        "deer": 96.2,
        "dog": 89.7,
        "frog": 95.3,
        "horse": 95.1,
        "ship": 95.3,
        "truck": 96.1
    },
    "Confusion Matrix": {
        "plane": "[946.0, 6.0, 15.0, 5.0, 3.0, 1.0, 3.0, 0.0, 15.0, 6.0]",
        "car": "[2.0, 968.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 5.0, 23.0]",
        "bird": "[17.0, 0.0, 897.0, 23.0, 25.0, 12.0, 15.0, 5.0, 5.0, 1.0]",
        "cat": "[5.0, 2.0, 18.0, 858.0, 21.0, 66.0, 20.0, 4.0, 4.0, 2.0]",
        "deer": "[2.0, 0.0, 12.0, 8.0, 962.0, 5.0, 4.0, 6.0, 0.0, 1.0]",
        "dog": "[3.0, 2.0, 9.0, 56.0, 14.0, 897.0, 7.0, 12.0, 0.0, 0.0]",
        "frog": "[7.0, 0.0, 16.0, 10.0, 7.0, 2.0, 953.0, 2.0, 2.0, 1.0]",
        "horse": "[5.0, 0.0, 4.0, 9.0, 19.0, 11.0, 0.0, 951.0, 1.0, 0.0]",
        "ship": "[25.0, 8.0, 1.0, 2.0, 3.0, 0.0, 1.0, 0.0, 953.0, 7.0]",
        "truck": "[4.0, 24.0, 1.0, 2.0, 2.0, 0.0, 1.0, 0.0, 5.0, 961.0]"
    }
}