{
    "Model": "MyModel",
    "Model Size Trainable": 46170,
    "Model Size Total": 46170,
    "Model Structure": [
        "(conv_1): Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "(bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "(relu_1): ReLU(inplace=True)",
        "(highway_12): Sequential(",
        "  (0): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))",
        "  (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_13): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_14): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv2_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_2): ReLU(inplace=True)",
        "(highway_23): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_24): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv3_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_3): ReLU(inplace=True)",
        "(highway_34): Sequential(",
        "  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv4_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_4): ReLU(inplace=True)",
        "(avgPool): AdaptiveAvgPool2d(output_size=(1, 1))",
        "(fc): Linear(in_features=32, out_features=10, bias=True)"
    ],
    "Batch Size": 128,
    "Total Epoch": 350,
    "Device": "cuda",
    "Loss Function": "CrossEntropyLoss",
    "Optimizer": {
        "Type": "SGD",
        "State": {},
        "param_groups": {
            "lr": 0.1,
            "momentum": 0.9,
            "dampening": 0,
            "weight_decay": 0.0001,
            "nesterov": false,
            "initial_lr": 0.1,
            "params": [
                140063990742472,
                140063990742544,
                140063990742616,
                140063990742976,
                140063990775880,
                140063990776024,
                140063990776168,
                140063990776528,
                140063990776600,
                140063990776744,
                140063990776888,
                140063990777248,
                140063990777320,
                140063990777464,
                140063990777608,
                140063990778112,
                140063990778328,
                140063990778400,
                140063990778760,
                140063990778976,
                140063990779048,
                140063990779480,
                140063990779696,
                140063990779768,
                140063990837536,
                140063990837752,
                140063990837824,
                140063990838256,
                140063990838328,
                140063990838472,
                140063990838616,
                140063990838976,
                140063990839048,
                140063990839192,
                140063990839336,
                140063990840560,
                140063990840776,
                140063990840848,
                140063990841208,
                140063990898832,
                140063990898904,
                140063990839696,
                140063990839768,
                140063990839912,
                140063990840056,
                140063990899336,
                140063990899552,
                140063990899624,
                140063990899984,
                140063990900200,
                140063990900272,
                140063990900704,
                140063990900776,
                140063990900920,
                140063990901064,
                140063990902288,
                140063990902504,
                140063990902576,
                140063990964440,
                140063990964656,
                140063990964728,
                140063990901424,
                140063990901496,
                140063990901640,
                140063990901784,
                140063990965160,
                140063990965376,
                140063990965448,
                140063990965808,
                140063990966024,
                140063990966096,
                140063990966528,
                140063990966600
            ]
        }
    },
    "lr Scheduler": {
        "Type": "MultiStepLR",
        "State": {
            "milestones": {
                "150": 1,
                "250": 1
            },
            "gamma": 0.1,
            "base_lrs": [
                0.1
            ],
            "last_epoch": 0,
            "_step_count": 1,
            "_get_lr_called_within_step": false,
            "_last_lr": [
                0.1
            ]
        }
    },
    "TrainSet Size": 0.125,
    "Train Transform": [
        "RandomCrop(size=(32, 32), padding=4)",
        "RandomHorizontalFlip(p=0.5)",
        "ToTensor()",
        "Normalize(mean=(0.4914, 0.4822, 0.4465), std=(0.247, 0.243, 0.261))"
    ],
    "Test Transform": [
        "ToTensor()",
        "Normalize(mean=(0.4914, 0.4822, 0.4465), std=(0.247, 0.243, 0.261))"
    ],
    "Dataset": "CIFAR10",
    "TrainingTime": "0:12:30.819106",
    "InferenceTime": "0:00:00.748259",
    "Performance": {
        "Best_Train": 99.248,
        "Final_Train": 98.784,
        "Best_Test": 76.78,
        "Final_Test": 75.84,
        "Best_Loss": 98.99576556682587,
        "Final_Loss": 2.9459985084831715
    },
    "Class Performance": {
        "plane": 78.8,
        "car": 88.7,
        "bird": 68.9,
        "cat": 54.2,
        "deer": 72,
        "dog": 68.8,
        "frog": 79.1,
        "horse": 76.9,
        "ship": 85.8,
        "truck": 85.2
    },
    "Confusion Matrix": {
        "plane": "[788.0, 18.0, 43.0, 13.0, 26.0, 9.0, 5.0, 13.0, 58.0, 27.0]",
        "car": "[18.0, 887.0, 3.0, 3.0, 2.0, 5.0, 2.0, 1.0, 20.0, 59.0]",
        "bird": "[59.0, 3.0, 689.0, 41.0, 58.0, 55.0, 55.0, 24.0, 9.0, 7.0]",
        "cat": "[24.0, 10.0, 56.0, 542.0, 46.0, 165.0, 73.0, 37.0, 22.0, 25.0]",
        "deer": "[18.0, 4.0, 65.0, 45.0, 720.0, 41.0, 45.0, 53.0, 6.0, 3.0]",
        "dog": "[10.0, 4.0, 46.0, 135.0, 35.0, 688.0, 19.0, 44.0, 6.0, 13.0]",
        "frog": "[8.0, 3.0, 75.0, 62.0, 29.0, 16.0, 791.0, 11.0, 3.0, 2.0]",
        "horse": "[24.0, 2.0, 27.0, 56.0, 43.0, 50.0, 6.0, 769.0, 1.0, 22.0]",
        "ship": "[58.0, 20.0, 9.0, 8.0, 2.0, 4.0, 12.0, 2.0, 858.0, 27.0]",
        "truck": "[26.0, 62.0, 6.0, 7.0, 0.0, 6.0, 3.0, 6.0, 32.0, 852.0]"
    }
}