{
    "Model": "MyModel",
    "Model Size Trainable": 46170,
    "Model Size Total": 46170,
    "Model Structure": [
        "(conv_1): Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "(bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "(relu_1): ReLU(inplace=True)",
        "(highway_12): Sequential(",
        "  (0): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))",
        "  (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_13): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_14): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv2_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_2): ReLU(inplace=True)",
        "(highway_23): Sequential(",
        "  (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(highway_24): Sequential(",
        "  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(4, 4))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv3_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(8, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_3): ReLU(inplace=True)",
        "(highway_34): Sequential(",
        "  (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        ")",
        "(conv4_x): Sequential(",
        "  (0): ResidualBlock(",
        "    (conv_1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResidualBlock(",
        "    (conv_1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_1): ReLU(inplace=True)",
        "    (conv_2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn_2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu_2): ReLU(inplace=True)",
        "  )",
        ")",
        "(relu_4): ReLU(inplace=True)",
        "(avgPool): AdaptiveAvgPool2d(output_size=(1, 1))",
        "(fc): Linear(in_features=32, out_features=10, bias=True)"
    ],
    "Batch Size": 128,
    "Total Epoch": 350,
    "Device": "cuda",
    "Loss Function": "CrossEntropyLoss",
    "Optimizer": {
        "Type": "SGD",
        "State": {},
        "param_groups": {
            "lr": 0.1,
            "momentum": 0.9,
            "dampening": 0,
            "weight_decay": 0.0001,
            "nesterov": false,
            "initial_lr": 0.1,
            "params": [
                139666367212640,
                139666367212712,
                139666367212784,
                139666367213144,
                139666367213216,
                139666367213360,
                139666367213504,
                139666367246696,
                139666367246768,
                139666367246912,
                139666367247056,
                139666367247416,
                139666367247488,
                139666367247632,
                139666367247776,
                139666367248280,
                139666367248496,
                139666367248568,
                139666367248928,
                139666367249144,
                139666367249216,
                139666367249648,
                139666367249864,
                139666367249936,
                139666367250296,
                139666367312016,
                139666367312088,
                139666367312520,
                139666367312592,
                139666367312736,
                139666367312880,
                139666367313240,
                139666367313312,
                139666367313456,
                139666367313600,
                139666367314824,
                139666367315040,
                139666367315112,
                139666367315472,
                139666367315688,
                139666367315760,
                139666367313960,
                139666367314032,
                139666367314176,
                139666367314320,
                139666367373600,
                139666367373816,
                139666367373888,
                139666367374248,
                139666367374464,
                139666367374536,
                139666367374968,
                139666367375040,
                139666367375184,
                139666367375328,
                139666367376552,
                139666367376768,
                139666367376840,
                139666367377200,
                139666367438920,
                139666367438992,
                139666367375688,
                139666367375760,
                139666367375904,
                139666367376048,
                139666367439424,
                139666367439640,
                139666367439712,
                139666367440072,
                139666367440288,
                139666367440360,
                139666367440792,
                139666367440864
            ]
        }
    },
    "lr Scheduler": {
        "Type": "MultiStepLR",
        "State": {
            "milestones": {
                "150": 1,
                "250": 1
            },
            "gamma": 0.1,
            "base_lrs": [
                0.1
            ],
            "last_epoch": 0,
            "_step_count": 1,
            "_get_lr_called_within_step": false,
            "_last_lr": [
                0.1
            ]
        }
    },
    "TrainSet Size": 0.25,
    "Train Transform": [
        "RandomCrop(size=(32, 32), padding=4)",
        "RandomHorizontalFlip(p=0.5)",
        "ToTensor()",
        "Normalize(mean=(0.4914, 0.4822, 0.4465), std=(0.247, 0.243, 0.261))"
    ],
    "Test Transform": [
        "ToTensor()",
        "Normalize(mean=(0.4914, 0.4822, 0.4465), std=(0.247, 0.243, 0.261))"
    ],
    "Dataset": "CIFAR10",
    "TrainingTime": "0:20:20.083565",
    "InferenceTime": "0:00:00.747557",
    "Performance": {
        "Best_Train": 97.056,
        "Final_Train": 96.6,
        "Best_Test": 81.36,
        "Final_Test": 80.72,
        "Best_Loss": 189.69185554981232,
        "Final_Loss": 11.294023808091879
    },
    "Class Performance": {
        "plane": 82.9,
        "car": 90.9,
        "bird": 70.8,
        "cat": 64.2,
        "deer": 79.6,
        "dog": 72.1,
        "frog": 85,
        "horse": 83,
        "ship": 90,
        "truck": 88.7
    },
    "Confusion Matrix": {
        "plane": "[829.0, 12.0, 45.0, 18.0, 10.0, 5.0, 7.0, 11.0, 34.0, 29.0]",
        "car": "[12.0, 909.0, 3.0, 6.0, 3.0, 0.0, 5.0, 1.0, 15.0, 46.0]",
        "bird": "[54.0, 1.0, 708.0, 55.0, 49.0, 45.0, 54.0, 24.0, 8.0, 2.0]",
        "cat": "[16.0, 4.0, 51.0, 642.0, 41.0, 141.0, 36.0, 38.0, 15.0, 16.0]",
        "deer": "[8.0, 4.0, 44.0, 41.0, 796.0, 29.0, 35.0, 36.0, 4.0, 3.0]",
        "dog": "[9.0, 2.0, 35.0, 142.0, 25.0, 721.0, 13.0, 43.0, 4.0, 6.0]",
        "frog": "[12.0, 2.0, 40.0, 49.0, 25.0, 13.0, 850.0, 4.0, 5.0, 0.0]",
        "horse": "[13.0, 2.0, 17.0, 38.0, 31.0, 55.0, 2.0, 830.0, 3.0, 9.0]",
        "ship": "[46.0, 21.0, 5.0, 3.0, 0.0, 2.0, 4.0, 3.0, 900.0, 16.0]",
        "truck": "[28.0, 50.0, 6.0, 8.0, 1.0, 2.0, 1.0, 0.0, 17.0, 887.0]"
    }
}